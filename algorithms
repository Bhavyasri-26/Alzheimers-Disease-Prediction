import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.metrics import confusion_matrix, precision_score, accuracy_score, recall_score, roc_curve, auc

#Load Data
data = pd.read_csv('oasis_longitudinal.csv')
data

#data preprocessing
data.info()

#Converting Categorical Data to Numerical Data
data['M/F'] = data['M/F'].apply(lambda x: 0 if x == 'F' else 1) #0 for F
data['Group'] = data['Group'].apply(lambda x: 0 if x == 'Nondemented' else 1) #0 for Nondemented
#data['Group'] = data['Group'].apply(lambda x: 1 if x == 'Demented' else 0) #1 for Demented
data.rename(columns={'M/F':'Gender'}, inplace=True)
data.info()

#Correlation Between Attributes
correlation_matrix = data.corr()
data_corr = correlation_matrix['Group'].sort_values(ascending=False)
data_corr

#Checking for null values.
data.isnull().sum()

#Taking median values for the missing values SES and MMSE.
SES=data['SES'].median()
MMSE=data['MMSE'].median()
data['SES'] = data['SES'].fillna(SES)
data['MMSE'] = data['MMSE'].fillna(MMSE)
data.isnull().sum()

#Drop unnecessary columns
data = data.drop(['Subject ID', 'MRI ID', 'Hand'], axis=1) 
data

data.describe()

def preprocessing_inputs(df):
    df = df.copy()
    
    #split df into X and y
    y= df['Group']
    X = df.drop(['Group', 'ASF'], axis=1)
    
    #Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45)
    
    #Scale X
    scaler = StandardScaler()
    scaler.fit(X_train)
    
    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)
    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)
    
    return X_train, X_test, y_train, y_test
    
X_train, X_test, y_train, y_test = preprocessing_inputs(data)
print('Train set:', X_train.shape, y_train.shape)
print('Test set:', X_test.shape, y_test.shape)
 
X_train.hist(bins=30, figsize=(20,15))
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, recall_score, precision_score 

import warnings 
warnings.filterwarnings('ignore')

#ml algo's
models = { '         Logistic Regression': LogisticRegression(),
           '    Decision Tree Classifier': DecisionTreeClassifier(),
           '                         SVM': SVC()}

for name, model in models.items():
    model.fit(X_train, y_train)
    print(name + ' trained.')

#Accuracy Score
for name, model in models.items():
    yhat = model.predict(X_test)
    acc = accuracy_score(y_test, yhat)

    print(name + ' Accuracy: {:.2%}'.format(acc))
    
# #F1-Score
for name, model in models.items():
    yhat = model.predict(X_test)
    f1 = f1_score(y_test, yhat, pos_label=1)
   
    print(name + ' F1-Score: {:.2%}'.format(f1))
    
#recall_score
for name, model in models.items():
    yhat = model.predict(X_test)
    test_recall = recall_score(y_test, yhat)
    
    print(name + ' recall_score: {:.2%}'.format(test_recall))

#precision_score
for name, model in models.items():
    yhat = model.predict(X_test)
    test_recall = precision_score(y_test, yhat)
    
    print(name + ' precision_score: {:.2%}'.format(test_recall))

from sklearn.metrics import plot_confusion_matrix

from sklearn.svm import SVC
clf_svm = SVC(random_state=42)
clf_svm.fit(X_train, y_train)
plot_confusion_matrix(clf_svm, 
                      X_test, 
                      y_test, 
                      values_format='d', 
                      display_labels=['Nondemented', 'Demented'])
                      
from sklearn.linear_model import LogisticRegression
log_reg_model = LogisticRegression().fit(X_train, y_train)
plot_confusion_matrix(log_reg_model, 
                      X_test, 
                      y_test, 
                      values_format='d', 
                      display_labels=['Nondemented', 'Demented'])


from sklearn.tree import DecisionTreeClassifier
dt_model = DecisionTreeClassifier().fit(X_train, y_train)
plot_confusion_matrix(dt_model, 
                      X_test, 
                      y_test, 
                      values_format='d', 
                      display_labels=['Nondemented', 'Demented'])
                      
                      
                      

